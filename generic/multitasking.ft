: USER   CREATE , DOES> @ UP@ + ;

0      DUP   USER FOLLOWER      \ points to the follower's STATUS variable
CELL - DUP   USER STATUS        \ PASS or WAKE - this needs to be one cell before FOLLOWER!
CELL - DUP   USER TOS           \ task's top of stack when switching
NEGATE CONSTANT USER#           \ save amount of allocated user variable space

: PAUSE   ( -- rp f'status )  \ suspend task at current execution point and switch to follower
    CR ." Pause " CR
    RP@ dup ." Old RP: " . \ push current rp
    SP@ dup ." Old TOS: " . !                 \ save sp to task's TOS
    FOLLOWER dup ." Follower address: " .
    @ dup ." Follower: " .
    DUP @ 1+ dup ." Follower word: " . cr >R    \ get follower's status and jump there
;

: 'U   FOLLOWER - + ;

: (WAKE)   ( rp sp 'status -- )
    CR ." Waking " dup . CR
    CELL+ UP!           \ take [rp] pointing to FOLLOWER and convert to TID
    TOS @ DUP ." New SP: " . SP!           \ restore sp for this task
    DUP ." New RP: " .
    DUP ." Continue at: " @ . CR
    RP!                 \ rp was on the stack, restore it as well
;

' (WAKE) CONSTANT WAKE

: AWAKE   ( tid -- ) WAKE SWAP STATUS 'U ! ;

: (PASS)  ( tid -- follower | -- r )
    CR ." Passing " CR
    CELL+ @ DUP @ 1+ RDROP >R   \ take [rp] pointing to FOLLOWER and jump there
;

' (PASS) CONSTANT PASS

: STOP   PASS STATUS ! PAUSE ;
: SLEEP   ( tid -- ) PASS SWAP STATUS 'U ! ;

: ACTIVATE   ( s: tid -- ) ( r: n' -- )
     DUP S0 'U @ CELL-  ( tid sp )      \ get sp and decrement before push
     OVER R0 'U @ CELL- ( tid sp rp )
     R> ." Continue at " dup . cr OVER !          ( tid sp rp )   \ save next word to rp
     OVER !             ( tid sp )      \ save rp to sp
     OVER TOS 'U !      ( tid )         \ save sp in tos
     AWAKE              ( -- )
;

: ALSOTASK   ( tid -- )             \ link new task after current task
     DUP SLEEP                      \ sleep new task
     FOLLOWER @ OVER FOLLOWER 'U !  \ set new task's follower to this task's follower
     STATUS 'U FOLLOWER !           \ set this task's follower to the new task's status
;

: ONLYTASK   ( tid -- )
    DUP SLEEP                           \ sleep this task
    DUP STATUS 'U SWAP FOLLOWER 'U !    \ set task's follower to own stats
;

: TASK:   ( s r "name" -- ) ( -- tid )
    CREATE USER# CELL+  HERE +          \ reserve user space and calculate TID
    DUP ,                               \ save TID
    0 ,                                 \ clear TOS
    PASS , ,                            \ set STATUS to PASS and FOLLOWER to STATUS
    2DUP + -ROT
    2 CELLS + HERE + DUP , + , ALLOT    \ set R0 and S0 and reserve stack space
    DOES> @
;

: .TASK
    CR
    DUP                 ." ID:       " . CR
    DUP ANY>LINK LINK>NAME
                        ." Name:     " COUNT TYPE CR
    DUP S0 'U @         ." Stack:    " . CR
    DUP TOS 'U @        ." TOS:      " . CR
    DUP R0 'U @         ." R-Stack:  " . CR
    DUP STATUS 'U @     ." Status:   " WAKE = IF ." WAKE" ELSE ." PASS" THEN CR
    DUP FOLLOWER 'U @   ." Follower: " CELL+ .
        FOLLOWER 'U @ @ ." = " . CR
;

: .TASKS
    UP@
    BEGIN
        DUP .TASK
        FOLLOWER 'U @ CELL+
        DUP UP@ =
    UNTIL
    DROP
;

: .td   dup s0 'u @ over - swap 2 cells - swap dumpw cr ;

$80 $80 task: task1
$80 $80 task: task2

: task1-init   task1 activate begin ." Task 1" cr pause again ;

: tasks-test
    task1 up!
    task1 onlytask
    task2 alsotask
    task1-init

    ." Pass: " pass .
    ." Wake: " wake . cr
    task1 .td task2 .td
    .tasks
;

