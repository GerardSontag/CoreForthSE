variable up
: up@ up @ ;
: up! up ! ;

: user   create , does> @ up@ + ;

0     dup   user status        \ pass or wake - this needs to be one cell before follower!
cell+ dup   user follower      \ points to the follower's status variable
cell+ dup   user tos           \ task's top of stack when switching
cell+ dup   user task          \ pointer to defining word
cell+ constant user#           \ save amount of allocated user variable space

: 'u   status - + ;

: task: ( s r "name" -- )( -- tid )
    create ram-dp @ aligned 3 cells + dup ,  \ save tid
           + user# + dup ,                   \ save r0
           + dup ,                           \ save s0
           ram-dp ! ;

: tid @ ;
: task-s0 ( task -- s0 ) cell+ @ ;
: task-r0 ( task -- r0 ) 2 cells + @ ;

: current-task ( -- task ) up@ task 'u @ ;
: s0 ( -- s0 )   current-task 2 cells + @ ;
: r0 ( -- s0 )   current-task cell+ @ ;
: depth   s0 sp@ - cell- cell / ;
: .s depth if depth 1+ 2 do s0 i cells - @ . loop dup . then ;

: pause   ( -- rp f'status )  \ suspend task at current execution point and switch to follower
    rp@                       \ push current rp
    sp@ tos !                 \ save sp to task's tos
    follower @ dup @ 1+       \ get follower's status and jump there
    >r
;

: (wake)   ( rp sp 'status -- )
    up!           \ set up to new task
    tos @ cell- @ rp!
    tos @ sp!      \ restore sp for this task
    drop
;

' (wake) constant wake

: (pass)  ( tid -- follower | -- r )
    cell+ @ dup @ 1+ rdrop >r   \ take [rp] pointing to follower and jump there
;

' (pass) constant pass

: stop   pass status ! pause ;

: awake   ( task -- ) tid wake swap status 'u ! ;
: sleep   ( task -- ) tid pass swap status 'u ! ;

: activate   ( s: task -- ) ( r: n' -- )
     dup 2 cells + @ cell-    ( task sp )      \ get sp and decrement before push
     over cell+ @ cell-       ( task sp rp )
     r> over !                ( task sp rp )   \ save next word to rp
     over cell- !                   ( task sp )      \ save rp to sp
     over tid tos 'u !        ( task )         \ save sp in tos
     awake                    ( -- )
;

: alsotask   ( task -- )             \ link new task after current task
     dup sleep                      \ sleep new task
     dup tid tuck
         follower @ over follower 'u !  \ set new task's follower to this task's follower
         status 'u follower !           \ set this task's follower to the new task's status
         swap task 'u !
;

: onlytask   ( task -- )
    dup   tid up!   task !   status follower !   pass status !   s0 tos !
;

: start-task ( task -- )   tid wake 1+ >r ;

: .task
    CR
    dup tid             ." ID:       " . cr
    dup any>link link>name
                        ." Name:     " count type cr
    dup cell+ @         ." R-Stack:  " . cr
    dup 2 cells + @     ." Stack:    " . cr
    tid
    dup tos 'u @        ." TOS:      " . cr
    dup task 'u @       ." Task:     " . cr
    dup status 'u @     ." Status:   " wake = if ." wake" else ." pass" then cr
    dup follower 'u @   ." Follower: " .
        follower 'u @ @ ." = " . cr
;

: .tasks
    up@
    begin
        dup task 'u @ .task
            follower 'u @ dup up@ =
    until
    drop
;

$80 $80 task: task0

